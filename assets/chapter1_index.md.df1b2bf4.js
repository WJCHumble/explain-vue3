import{l as a,f as o,G as e}from"./framework.5c8a4622.js";const s='{"title":"Monorepo","description":"","frontmatter":{},"headers":[{"level":2,"title":"Monorepo","slug":"monorepo"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter1/index.md","lastUpdated":1628927998783}',n={},p=e('<h2 id="monorepo"><a class="header-anchor" href="#monorepo" aria-hidden="true">#</a> Monorepo</h2><p>在「Vue3」，它采用了「Monorepo」的方式来管理项目的代码。那么，什么是「Monorepo」？我们先来看看维基百科上对「Monorepo」的介绍：</p><p><strong>———— In revision control systems, a monorepo is a software development strategy where code for many projects is stored in the same repository.</strong></p><p>简单理解，「Monorepo」<strong>指一种将多个项目放到一个仓库的一种管理项目的策略</strong>。当然，这只是概念上的理解。而对于实际开发中的场景，「Monorepo」的使用通常是通过 <code>yarn</code> 的 <code>workspaces</code> 工作空间，又或者是 <code>lerna</code> 这种高度封装的第三方工具库来实现。使用「Monorepo」的方式来管理项目会给我们带来以下这些好处：</p><ul><li>只需要一个仓库，就可以便捷地管理多个项目</li><li>可以管理不同项目中的相同第三方依赖，做到依赖的同步更新</li><li>可以使用其他项目中的代码，清晰地建立起项目间的依赖关系</li></ul><p>而「Vue3」正是采用的 <code>yarn</code> 的 <code>workspaces</code> 工作空间的方式管理整个项目，而 <code>workspaces</code> 的特点就是在 <code>package.json</code> 中会有这么两句不同于普通项目的声明：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n    <span class="token string">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token string">&quot;packages/*&quot;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>其中 <code>&quot;private&quot;: true</code> 的作用是保证了工作区的安全，避免被其他引用， <code>&quot;workspaces&quot;</code> 则是用来声明工作区所包含的项目的位置，很显然它可以声明多个，而 <code>packages/*</code> 指的是 <code>packages</code> 文件夹下的所有项目。并且，「Vue3」中对工作区的声明也是 <code>pacakges/*</code>，所以它的目录结构会是这样：</p><div class="language-javascript"><pre><code><span class="token operator">...</span>\n<span class="token operator">|</span>—— packages\n    <span class="token operator">|</span>———— compiler<span class="token operator">-</span>core\n    <span class="token operator">|</span>———— compiler<span class="token operator">-</span>dom\n    <span class="token operator">|</span>———— compiler<span class="token operator">-</span>sfc\n    <span class="token operator">|</span>———— compiler<span class="token operator">-</span>ssr\n    <span class="token operator">|</span>———— reactivity\n    <span class="token operator">|</span>———— runime<span class="token operator">-</span>core\n    <span class="token operator">|</span>———— runime<span class="token operator">-</span>dom\n    <span class="token operator">|</span>———— runime<span class="token operator">-</span>test\n    <span class="token operator">|</span>———— server<span class="token operator">-</span>renderer\n    <span class="token operator">|</span>———— shared\n    <span class="token operator">|</span>———— size<span class="token operator">-</span>check\n    <span class="token operator">|</span>———— template<span class="token operator">-</span>explorer\n    <span class="token operator">|</span>———— vue\n    global<span class="token punctuation">.</span>dt<span class="token punctuation">.</span>s\n<span class="token keyword">package</span><span class="token punctuation">.</span>json\n</code></pre></div><blockquote><p>这里我只展示了 <code>packages</code> 文件目录和 <code>package.json</code>，至于其他目录有兴趣的同学可以自行了解。</p></blockquote><p>可以看到，<code>packages</code> 文件目录下根据「Vue3」实现所需要的能力划分了不同的项目，例如 <code>reactivity</code> 文件目录下就是和 <code>reactivity</code> API 相关的代码，并且它的内部的结构会是这样：</p><div class="language-javascript"><pre><code><span class="token operator">|</span>—— __tests__               ## 测试用例\n<span class="token operator">|</span>—— src                     ## reactive <span class="token constant">API</span> 实现相关代码\napi<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>json\nindex<span class="token punctuation">.</span>js\n<span class="token constant">LICENSE</span>\n<span class="token keyword">package</span><span class="token punctuation">.</span>json                ## reactive <span class="token constant">API</span> 实现相关代码\n<span class="token constant">README</span><span class="token punctuation">.</span>md\n</code></pre></div><p>在 <code>reactivity</code> 项目文件的内部也同样有 <code>package.json</code> 文件，也就是如我们上面所说的，<code>packages</code> 文件目录下的文件都各自对应着每一个单独的项目。所以，每一个项目中的 <code>package.json</code> 就对应着改项目对应的依赖、入口、打包的一些配置等等。</p><p>而「Vue3」使用「Monorepo」的方式管理项目的好处就是我们可以单独使用它的一些 API 的能力，而不是只能在「Vue」项目中使用它。很典型的例子就是，我们可以通过 <code>npm i @vue/reactivity</code> 单独安装 <code>reactivity</code> API 对应的 <code>npm</code> 包，从而在其他地方使用 <code>reactivity</code> API 来实现观察者模式。</p><blockquote><p>当然，使用「Monorepo」还需要思考诸多其他问题，例如增量编译、多任务编译等等，有兴趣同学可以自行去了解。</p></blockquote><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>那么，在简单介绍完「Vue3」是以「Monorepo」的方式管理项目后。我想，大家心中都已明了，如果我们要去了解「Vue3」怎么去实现模板编译、runtime + compiler 的巧妙结合、Virtual DOM 的实现等等原理，我们就可以从 <code>packages</code> 文件目录下的各个文件开始着手来研究它们的实现。</p>',17);n.render=function(e,s,n,t,c,r){return a(),o("div",null,[p])};export default n;export{s as __pageData};
