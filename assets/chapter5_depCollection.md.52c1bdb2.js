import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"依赖收集","description":"","frontmatter":{},"headers":[{"level":2,"title":"get","slug":"get"},{"level":2,"title":"track","slug":"track"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter5/depCollection.md","lastUpdated":1628927998785}',p={},o=a('<h1 id="依赖收集"><a class="header-anchor" href="#依赖收集" aria-hidden="true">#</a> 依赖收集</h1><blockquote><p>TODO: 待完善</p></blockquote><h2 id="get"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h2><p>前面，我们已经讲到了在组件渲染过程会安装渲染 <code>Effect</code>。然后，进入渲染组件的阶段，即 <code>renderComponentRoot()</code>，而此时会调用 <code>proxyToUse</code>，即会触发 <code>runtimeCompiledRenderProxyHandlers</code> 的 <code>get</code>，即：</p><div class="language-javascript"><pre><code><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>renderContext <span class="token operator">!==</span> <span class="token constant">EMPTY_OBJ</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>renderContext<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        accessCache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">/* CONTEXT */</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> renderContext<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看出，此时会命中 <code>accessCache[key] = 1</code> 和 <code>renderContext[key]</code> 。对于<strong>前者</strong>是做一个缓存的作用，<strong>后者</strong>是从当前的渲染上下文中获取 <code>key</code> 对应的值（（对于本文这个 <code>case</code>，<code>key</code> 对应的就是 <code>count</code>，它的值为 <code>0</code>）。</p><p>那么，我想这个时候大家会立即反应，此时会触发这个 <code>count</code> 对应 <code>Proxy</code> 的 <code>get</code>。但是，在我们这个 <code>case</code> 中，用了 <code>toRefs()</code> 将 <code>reactive</code> 包裹导出，所以这个触发 <code>get</code> 的过程会分为两个阶段：</p><blockquote><p>两个阶段的不同点在于，第一阶段的 <code>target</code> 为一个 <code>object</code>（即上面所说的<code>toRefs</code>的对象结构），而第二阶段的 <code>target</code> 为<code>Proxy</code>对象 <code>{count: 0}</code>。具体细节可以看我<a href="https://juejin.im/post/5e7707f0f265da57301c18b8" target="_blank" rel="noopener noreferrer">上篇文章</a></p></blockquote><p><code>Proxy</code> 对象<code>toRefs()</code> 后得到对象的结构：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n    value<span class="token operator">:</span> <span class="token number">0</span>\n    _isRef<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    set<span class="token operator">:</span> <span class="token function">ƒunction</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>我们先来看看 <code>get()</code> 的逻辑：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n        <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> builtInSymbols<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token operator">...</span>\n        <span class="token comment">// ref unwrapping, only for Objects, not for Arrays.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token operator">?</span> isReadonly\n                <span class="token operator">?</span> <span class="token comment">// need to lazy access readonly and reactive here to avoid</span>\n                    <span class="token comment">// circular dependency</span>\n                    <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n                <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token operator">:</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>第一阶段：触发普通对象的 <code>get</code></p></blockquote><p>由于此时是第一阶段，所以我们会命中 <code>isRef()</code> 的逻辑，并返回 <code>res.value</code> 。此时就会触发 <code>reactive</code> 定义的 <code>Proxy</code> 对象的 <code>get</code>。并且需要<strong>注意</strong>的是 <code>toRefs()</code> 只能用于对象，否则我们即时触发了 <code>get</code> 也不能获取对应的值（这其实也是看源码的一些好处，深度理解 <code>API</code> 的使用）。</p><h2 id="track"><a class="header-anchor" href="#track" aria-hidden="true">#</a> track</h2><blockquote><p>第二阶段：触发 <code>Proxy</code> 对象的 <code>get</code></p></blockquote><p>此时属于第二阶段，所以我们会命中 <code>get</code> 的最后逻辑：</p><div class="language-javascript"><pre><code><span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token operator">?</span> isReadonly\n    <span class="token operator">?</span> <span class="token comment">// need to lazy access readonly and reactive here to avoid</span>\n      <span class="token comment">// circular dependency</span>\n      <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token operator">:</span> res<span class="token punctuation">;</span>\n</code></pre></div><p>可以看到，首先会调用 <code>track()</code> 函数，进行<strong>依赖收集</strong>，而 <code>track()</code> 函数定义如下：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">&amp;&amp;</span> activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        effect<span class="token operator">:</span> activeEffect<span class="token punctuation">,</span>\n        target<span class="token punctuation">,</span>\n        type<span class="token punctuation">,</span>\n        key<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到，第一个分支逻辑不会命中，因为我们在前面分析 <code>run()</code> 的时候，就已经定义 <code>ishouldTrack = true</code> 和 <code>activeEffect = effect</code>。然后，命中 <code>depsMap === void 0</code> 逻辑，往 <code>targetMap</code> 中添加一个键名为 <code>{count: 0}</code> 键值为一个空的 <code>Map</code>:</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>而此时，我们也可以对比<code>Vue 2.x</code>，这个 <code>{count: 0}</code> 其实就相当于 <code>data</code> 选项（以下统称为 <code>data</code>）。所以，这里也可以理解成先对 <code>data</code> 初始化一个 <code>Map</code>，显然这个 <code>Map</code> 中存的就是不同属性对应的 <code>dep</code></p></blockquote><p>然后，对 <code>count</code> 属性初始化一个 <code>Map</code> 插入到 <code>data</code> 选项中，即：</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>所以，此时的 <code>dep</code> 就是 <code>count</code> 属性对应的主题对象了。接下来，则判断是否当前 <code>activeEffect</code> 存在于 <code>count</code> 的主题中，如果不存在则往主题 <code>dep</code> 中添加 <code>activeEffect</code>，并且将当前主题 <code>dep</code> 添加到 <code>activeEffect</code> 的 <code>deps</code> 数组中。</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 最后的分支逻辑，我们这次并不会命中</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>最后，再回到 <code>get()</code>，会返回 <code>res</code> 的值，在我们这个 <code>case</code> 是 <code>res</code> 的值是 <code>0</code>。</p><div class="language-javascript"><pre><code><span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token operator">?</span> isReadonly\n    <span class="token operator">?</span> <span class="token comment">// need to lazy access readonly and reactive here to avoid</span>\n      <span class="token comment">// circular dependency</span>\n      <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n  <span class="token operator">:</span> res<span class="token punctuation">;</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，整个 <code>reactive</code> 的依赖收集过程，已经分析完了。我们再来回忆其中几个关键点，首先在组件渲染过程，会给当前 <code>vm</code> 实例创建一个 <code>effect</code>，然后将当前的 <code>activeEffect</code> 赋值为 <code>effect</code>，并在 <code>effect</code> 上创建一些属性，例如非常重要的 <code>deps</code> 用于<strong>保存依赖</strong>。</p><p>接下来，当该组件使用了 <code>data</code> 中的变量时，会访问对应变量的 <code>get()</code>。第一次访问 <code>get()</code> 会创建 <code>data</code> 对应的 <code>depsMap</code>，即 <code>targetMap</code>。然后再往 <code>targetMap</code> 的 <code>depMap</code> 中添加对应属性的 <code>Map</code>，即 <code>depsMap</code>。</p><p>创建完属性的 <code>depsMap</code> 后，一方面会往该属性的 <code>depsMap</code> 中添加当前 <code>activeEffect</code>，即<strong>收集订阅者</strong>。另一方面，将该属性的 <code>depsMap</code> 添加到 <code>activeEffect</code> 的 <code>deps</code> 数组中，<strong>即订阅主题</strong>。从而，形成整个依赖收集过程。</p><blockquote><p>整个 <code>get</code> 过程的流程图</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/596ab5f7d97a42528dbc6c9a8aad2d56~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>',35);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
