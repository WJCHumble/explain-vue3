import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"基本介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍"},{"level":2,"title":"安装渲染 Effect","slug":"安装渲染-effect"}],"relativePath":"chapter5/index.md","lastUpdated":1628927998785}',p={},o=a('<h2 id="基本介绍"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><blockquote><p>值得一提的是在 <code>Vue 3.0</code> 中没有了<code>watcher</code> 的概念，取而代之的是 <code>effect</code> ，所以接下来会接触很多和 <code>effect</code> 相关的函数</p></blockquote><p>在文章的开始前，我们先准备这样一个简单的 <code>case</code>，以便后续分析具体逻辑：</p><p><strong>main.js 项目入口</strong></p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>App.vue 组件</strong></p><div class="language-javascript"><pre><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;inc&quot;</span><span class="token operator">&gt;</span>Clicked <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span> times<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">inc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      inc<span class="token punctuation">,</span>\n      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="安装渲染-effect"><a class="header-anchor" href="#安装渲染-effect" aria-hidden="true">#</a> 安装渲染 Effect</h2><p>首先，我们大家都知道在通常情况下，我们的页面会使用当前实例的一些属性、计算属性、方法等等。所以，在组件渲染的过程就会发生依赖收集的这个过程。也因此，我们先从组件的渲染过程开始分析。</p><p>在组件的渲染过程中，会安装（创建）一个渲染 <code>effect</code>，即 <code>Vue 3.0</code> 在编译 <code>template</code> 的时候，对是否有订阅数据做出相应的判断，创建对应的渲染 <code>effect</code>，它的定义如下：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// create reactive effect for rendering</span>\n    instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">componentEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">...</span><span class="token punctuation">.</span>\n            instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token operator">...</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">createDevEffectOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> prodEffectOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>我们来大致分析一下 <code>setupRenderEffect()</code>。它传入几个参数，它们分别为：</p><ul><li><code>instance</code> 当前 <code>vm</code> 实例</li><li><code>initialVNode</code> 可以是组件 <code>VNode</code> 或者普通 <code>VNode</code></li><li><code>container</code> 挂载的模板，例如 <code>div#app</code> 对应的节点</li><li><code>anchor</code>, <code>parentSuspense</code>, <code>isSVG</code> 普通情况下都为 <code>null</code></li></ul><p>然后在当前实例 <code>instance</code> 上创建属性 <code>update</code> 赋值为 <code>effect()</code> 函数的执行结果，<code>effect()</code> 函数传入两个参数：</p><ul><li><code>componentEffect()</code> 函数，它会在具体逻辑之后提到，这里我们先不讲</li><li><code>createDevEffectOptions(instance)</code> 用于后续的派发更新，它会返回一个对象：</li></ul><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n    scheduler<span class="token operator">:</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    onTrack<span class="token operator">:</span> instance<span class="token punctuation">.</span>rtc <span class="token operator">?</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">invokeHooks</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>rtc<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    onTrigger<span class="token operator">:</span> instance<span class="token punctuation">.</span>rtg <span class="token operator">?</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">invokeHooks</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>rtg<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后，我们再来看看<code>effect()</code> 函数定义：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fn <span class="token operator">=</span> fn<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token function">createReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> effect<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>effect()</code> 函数的逻辑较为简单，首先判断是否已经为 <code>effect</code>，是则取出之前定义的。不是则通过 <code>ceateReactiveEffect()</code> 创建一个 <code>effect</code>，而 <code>creatReactiveEffect()</code> 的逻辑会是这样：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">createReactiveEffect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">reactiveEffect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  effect<span class="token punctuation">.</span>_isEffect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  effect<span class="token punctuation">.</span>raw <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n  effect<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  effect<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> effect<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到在 <code>createReactiveEffect()</code> 中先定义了一个 <code>reactiveEffect()</code> 函数赋值给 <code>effect</code>，它又调用了 <code>run()</code>方法。而 <code>run()</code> 方法中传入三个参数，分别为：</p><ul><li><code>effect</code>，即 <code>reactiveEffect()</code> 函数本身</li><li><code>fn</code>，即在刚开始 <code>instance.update</code> 是调用 <code>effect</code> 函数时，传入的函数 <code>componentEffect()</code></li><li><code>args</code> 为一个空数组</li></ul><p>并且，对 <code>effect</code> 进行了一些初始化，例如我们<strong>最熟悉</strong>的 <code>Vue 2x</code> 中的 <code>deps</code> 就出现在 <code>effect</code> 这个对象上。</p><p>然后，我们分析一下 <code>run()</code> 函数的逻辑：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effectStack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">cleanup</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token function">enableTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      activeEffect <span class="token operator">=</span> effect<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在这里，初次创建 <code>effect</code>，我们会命中第二个分支逻辑，即当前 <code>effectStack</code> 栈中不包含这个 <code>effect</code>。那么，首先会执行 <code>cleanup(effect)</code>，即遍历<code>effect.deps</code>，清空之前的依赖。</p><blockquote><p><code>cleanup()</code> 的逻辑其实在<code>Vue 2x</code>的源码中也有的，避免依赖的重复收集。并且，对比 <code>Vue 2x</code>，<code>Vue 3.0</code> 中的 <code>track</code> 其实相当于 <code>watcher</code>，在 <code>track</code> 中会进行依赖的收集，后面我们会讲 <code>track</code> 的具体实现</p></blockquote><p>然后，执行<code>enableTracking()</code>和<code>effectStack.push(effect)</code>，前者的逻辑很简单，即可以追踪，用于后续触发 <code>track</code> 的判断：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">enableTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  trackStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shouldTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  shouldTrack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>而后者，即将当前的 <code>effect</code> 添加到 <code>effectStack</code> 栈中。最后，执行 <code>fn()</code> ，即我们一开始定义的 <code>instance.update = effect()</code> 时候传入的 <code>componentEffect()</code>：</p><div class="language-javascript"><pre><code>instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">componentEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// beforeMount hook</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bm <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">invokeHooks</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>el <span class="token operator">&amp;&amp;</span> hydrateNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// vnode has adopted host node - perform hydration instead of mount.</span>\n            <span class="token function">hydrateNode</span><span class="token punctuation">(</span>initialVNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            initialVNode<span class="token punctuation">.</span>el <span class="token operator">=</span> subTree<span class="token punctuation">.</span>el<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// mounted hook</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>m <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>m<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// activated hook for keep-alive roots.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n            instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> <span class="token number">256</span> <span class="token comment">/* COMPONENT_SHOULD_KEEP_ALIVE */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">createDevEffectOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> prodEffectOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><blockquote><p>而接下来就会进入组件的渲染过程，其中涉及 <code>renderComponnetRoot</code>、<code>patch</code> 等等，这次我们并不会分析组件渲染具体细节。</p></blockquote><p>安装渲染 <code>Effect</code>，是为后续的依赖收集做一个前期的准备。因为在后面会用到 <code>setupRenderEffect</code> 中定义的 <code>effect()</code> 函数，以及会调用 <code>run()</code> 函数。所以，接下来，我们就正式进入依赖收集部分的分析。</p>',33);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
