import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"基本介绍","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍"}],"relativePath":"chapter2/index.md","lastUpdated":1628927998784}',o={},p=a('<h2 id="基本介绍"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h2><p>在 Vue3 中编译是由 <code>compiler-core</code> 这个 <code>package</code> 完成的，其顾名思义即核心的编译，它会做这么三件事：</p><ul><li><strong>baseParse</strong>，对组件 <code>template</code> 进行词法分析，生成对应的抽象语法树 AST。</li><li><strong>transfrom</strong>（转化）AST，针对每一个 AST Element，进行不同的 transform 处理，例如 <code>v-on</code>、<code>slot</code>、<code>v-if</code>、纯文本元素等等。</li><li><strong>generate</strong>，根据转化后的 AST 来生成对应的可执行函数。</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c07934c57a14ff18e5139b0316936f1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>而这三个过程主要是由 <code>baseCompiler</code> 负责来完成，它对应的伪代码会是这样：</p><p><strong>baseCompiler 函数</strong></p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>\n  <span class="token parameter">template<span class="token operator">:</span> string <span class="token operator">|</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> template\n  <span class="token operator">...</span>\n  <span class="token function">transform</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n    ast<span class="token punctuation">,</span>\n    <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      prefixIdentifiers\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>假设，我们此时有这么一个栗子，它的 <code>template</code> 会是这样：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>hi vue3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>其中 <code>msg</code> 是一个插值，对应的值为 <code>hello vue3</code>。而在 <code>compiler-core</code> 时，它的核心方法是 <code>baseCompiler</code>，它会通过调用 <code>baseParse</code> 函数来将这个 <code>template</code> 解析成 AST。</p><p>那么，我们这个栗子，它经过 <code>baseParse</code> 处理后生成对应的 AST 会是这样：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  cached<span class="token operator">:</span> <span class="token number">0</span>\n  children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span>\n  codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  directives<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  helpers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  hoists<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;&lt;div&gt;hi vue3&lt;/div&gt;&lt;div&gt;{{msg}}&lt;/div&gt;&lt;/div&gt;&quot;</span><span class="token punctuation">}</span>\n  temps<span class="token operator">:</span> <span class="token number">0</span>\n  type<span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>这里先不展开 children 中的 AST Element，后面会一一涉及。</p></blockquote><p>如果，了解过「Vue 2.x」编译过程的同学应该对于上面这颗 AST 的大部分属性不会陌生。 AST 的本质是通过用对象来描述 DSL（特殊领域语言），例如：</p><ul><li><code>children</code> 中存放的就是最外层 <code>div</code> 的子代。</li><li><code>loc</code> 则用来描述这个 AST Element 在整个字符串（template）中的位置信息。</li><li><code>type</code> 则是用于描述这个元素的类型（例如 5 为插值、2 为文本）等等。</li></ul><p>我想大家可能会有疑问的就是 <code>codegenNode</code>、<code>hoists</code> 这两个属性。而这两个属性也是「Vue 3」针对<strong>更新性能</strong>问题所添加的两个属性。对于前者 <code>codegenNode</code> 是用于描述该节点在 <code>generate</code> 的一些表现。对于后者 <code>hoists</code> 是用于<strong>存储需要静态提升的节点</strong>。</p><p>那么，对于 <code>codegenNode</code> 它又是怎么来的？从上面的 AST，可以看到它的 <code>codegenNode</code> 是 <code>undefined</code>，也就是在 <code>parse</code> 阶段，并不会处理生成 <code>codegen</code>。</p><p>而真正处理生成 AST Element 对应的 <code>codegenNode</code> 是在 <code>transform</code> 阶段完成。在这个阶段，它会执行很多 <code>transform</code> 函数，对于我们这个栗子，会命中两个比较特殊的 <code>transform</code> 函数，它分别是：<code>transformText</code>、<code>transformElement</code>。</p>',18);o.render=function(a,t,o,e,c,l){return n(),s("div",null,[p])};export default o;export{t as __pageData};
