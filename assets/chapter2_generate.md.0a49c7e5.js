import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"generate","description":"","frontmatter":{},"headers":[{"level":2,"title":"CodegenContext","slug":"codegencontext"},{"level":2,"title":"genFunctionPreamble","slug":"genfunctionpreamble"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter2/generate.md","lastUpdated":1631689824899}',p={},o=a('<h1 id="generate"><a class="header-anchor" href="#generate" aria-hidden="true">#</a> generate</h1><p><code>generate</code> 是 <code>compile</code> 阶段的最后一步，它的作用是将 <code>transform</code> 转换后的 AST 生成对应的<strong>可执行代码</strong>，从而在之后 Runtime 的 Render 阶段时，就可以通过可执行代码生成对应的 VNode Tree，然后最终映射为真实的 DOM Tree 在页面上。</p><p>同样地，这一阶段在「Vue2.x」也是由 <code>generate</code> 函数完成，它会生成是诸如 <code>_l</code>、<code>_c</code> 之类的函数，这本质上是对 <code>_createElement</code> 函数的封装。而相比较「Vue2.x」版本的 <code>generate</code>，「Vue3」改变了很多，其 <code>generate</code> 函数对于的伪代码会是这样：</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span>\n  <span class="token parameter">ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> CodegenOptions <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    onContextCreated<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token operator">:</span> CodegenContext</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>onContextCreated<span class="token punctuation">)</span> options<span class="token punctuation">.</span><span class="token function">onContextCreated</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    mode<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    indent<span class="token punctuation">,</span>\n    deindent<span class="token punctuation">,</span>\n    newline<span class="token punctuation">,</span>\n    scopeId<span class="token punctuation">,</span>\n    ssr\n  <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token operator">...</span>\n  <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token operator">...</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ssr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function render(_ctx, _cache</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>optimizeSources<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) {</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span><span class="token punctuation">.</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    ast<span class="token punctuation">,</span>\n    code<span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>\n    <span class="token comment">// SourceMapGenerator does have toJSON() method but it&#39;s not in the types</span>\n    map<span class="token operator">:</span> context<span class="token punctuation">.</span>map <span class="token operator">?</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>map <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>所以，接下来，我们就来<strong>一睹</strong>带有静态节点对应的 AST 生成的可执行代码的过程会是怎样。</p><h2 id="codegencontext"><a class="header-anchor" href="#codegencontext" aria-hidden="true">#</a> CodegenContext</h2><p>从上面 <code>generate</code> 函数的伪代码可以看到，在函数的开始调用了 <code>createCodegenContext</code> 为当前 AST 生成了一个 <code>context</code>。在整个 <code>generate</code> 函数的执行过程<strong>都依托</strong>于一个 <code>CodegenContext</code> <strong>生成代码上下文</strong>（对象）的能力，它是通过 <code>createCodegenContext</code> 函数生成。而 <code>CodegenContext</code> 的接口定义会是这样：</p><div class="language-javascript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">CodegenContext</span>\n  <span class="token keyword">extends</span> <span class="token class-name">Omit</span><span class="token operator">&lt;</span>Required<span class="token operator">&lt;</span>CodegenOptions<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;bindingMetadata&#39;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  source<span class="token operator">:</span> string\n  code<span class="token operator">:</span> string\n  line<span class="token operator">:</span> number\n  column<span class="token operator">:</span> number\n  offset<span class="token operator">:</span> number\n  indentLevel<span class="token operator">:</span> number\n  pure<span class="token operator">:</span> boolean\n  map<span class="token operator">?</span><span class="token operator">:</span> SourceMapGenerator\n  <span class="token function">helper</span><span class="token punctuation">(</span>key<span class="token operator">:</span> symbol<span class="token punctuation">)</span><span class="token operator">:</span> string\n  <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token operator">:</span> string<span class="token punctuation">,</span> node<span class="token operator">?</span><span class="token operator">:</span> CodegenNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token function">deindent</span><span class="token punctuation">(</span>withoutNewLine<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到 <code>CodegenContext</code> 对象中有诸如 <code>push</code>、<code>indent</code>、<code>newline</code> 之类的方法。而它们的作用是在根据 AST 来生成代码时用来<strong>实现换行</strong>、<strong>添加代码</strong>、<strong>缩进</strong>等功能。从而，最终形成一个个可执行代码，即我们所认知的 <code>render</code> 函数，并且，它会作为 <code>CodegenContext</code> 的 <code>code</code> 属性的值返回。</p><p>下面，我们就来看下静态节点的可执行代码生成的核心，它被称为 <code>Preamble</code> 前导。</p><h2 id="genfunctionpreamble"><a class="header-anchor" href="#genfunctionpreamble" aria-hidden="true">#</a> genFunctionPreamble</h2><p>整个静态提升的可执行代码生成就是在 <code>genFunctionPreamble</code> 函数部分完成的。并且，大家仔细<strong>斟酌</strong>一番静态提升的字眼，静态二字我们可以不看，但是<strong>提升二字</strong>，直抒本意地表达出它（静态节点）被<strong>提高了</strong>。</p><p>为什么说是提高了？因为在源码中的体现，确实是被提高了。在前面的 <code>generate</code> 函数，我们可以看到 <code>genFunctionPreamble</code> 是先于 <code>render</code> 函数加入 <code>context.code</code> 中，所以，在 Runtime 阶段的 Render，它会先于 <code>render</code> 函数执行。</p><p><code>geneFunctionPreamble</code> 函数（伪代码）：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    ssr<span class="token punctuation">,</span>\n    prefixIdentifiers<span class="token punctuation">,</span>\n    push<span class="token punctuation">,</span>\n    newline<span class="token punctuation">,</span>\n    runtimeModuleName<span class="token punctuation">,</span>\n    runtimeGlobalName\n  <span class="token punctuation">}</span> <span class="token operator">=</span> context\n  <span class="token operator">...</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">aliasHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token operator">:</span> symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> staticHelpers <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token constant">CREATE_VNODE</span><span class="token punctuation">,</span>\n        <span class="token constant">CREATE_COMMENT</span><span class="token punctuation">,</span>\n        <span class="token constant">CREATE_TEXT</span><span class="token punctuation">,</span>\n        <span class="token constant">CREATE_STATIC</span>\n       <span class="token punctuation">]</span>\n        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">helper</span> <span class="token operator">=&gt;</span> ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>helper<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span>\n      <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>staticHelpers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } = _Vue\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n  <span class="token function">genHoists</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到，这里会对前面我们在 <code>transform</code> 函数提及的 <code>hoists</code> 属性的长度进行判断。显然，对于前面说的这个栗子，它的 <code>ast.hoists.length</code> 长度是大于 0 的。所以，这里就会根据 <code>hoists</code> 中的 AST 生成对应的可执行代码。因此，到这里，生成的可执行代码会是这样：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue<span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> createVNode<span class="token operator">:</span> _createVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue<span class="token punctuation">;</span>\n<span class="token comment">// 静态提升部分</span>\n<span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hi vue3&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// render 函数会在这下面</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n    _hoisted_1<span class="token punctuation">,</span>\n    <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',18);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
