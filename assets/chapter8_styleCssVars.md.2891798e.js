import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"Style CSS Variable Injection","description":"","frontmatter":{},"headers":[{"level":2,"title":"SFC 编译过程处理","slug":"sfc-编译过程处理"},{"level":2,"title":"SFC 编译结果分析","slug":"sfc-编译结果分析"},{"level":3,"title":"useCssVars","slug":"usecssvars"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter8/styleCssVars.md","lastUpdated":1628927998787}',p={},o=a('<h1 id="style-css-variable-injection"><a class="header-anchor" href="#style-css-variable-injection" aria-hidden="true">#</a> Style CSS Variable Injection</h1><p>Style CSS Variable Injection，即 <code>&lt;style&gt;</code> 动态变量注入，根据 <a href="https://github.com/vuejs/rfcs/pull/231" title="SFC" target="_blank" rel="noopener noreferrer">SFC</a> 上尤大的总结，它主要有以下 5 点能力：</p><ul><li>不需要明确声明某个属性被注入作为 CSS 变量（会根据 CSS 中的 <code>v-bind()</code> 推断）</li><li>响应式的变量</li><li>在 Scoped/Non-scoped 模式下具备不同的表现</li><li>不会污染子组件</li><li>普通的 CSS 变量的使用不会被影响</li></ul><p>下面，我们来看一个简单使用 <code>&lt;style&gt;</code> 动态变量注入的例子：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>word<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeColor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">.word</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">v-bind</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>对应的渲染到页面上：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e63f43156beb4b84bd0471e4022ffb2d~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>从上面的代码片段，很容易得知当我们点击 <code>click me</code> 按钮，文字的背景色就会发生变化：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fee3319096d4b778a205f03fd815e63~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>而这就是 <code>&lt;style&gt;</code> 动态变量注入赋予我们的能力，让我们<strong>很便捷地</strong>通过 <code>&lt;script&gt;</code> 中的变量来操作 <code>&lt;template&gt;</code> 中的 HTML 元素<strong>样式的动态改变</strong>。</p><p>那么，这个过程又发生了什么？怎么实现的？有疑问是件好事，接着让我们来一步步揭开其幕后的实现原理。</p><h2 id="sfc-编译过程处理"><a class="header-anchor" href="#sfc-编译过程处理" aria-hidden="true">#</a> SFC 编译过程处理</h2><p>SFC 在编译过程对 <code>&lt;style&gt;</code> 动态变量注入的处理实现，主要是基于的 <strong>2 个关键点</strong>。这里，我们以上面的例子作为示例分析：</p><ul><li>在对应 DOM 上绑定行内 <code>style</code>，通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var(%20%22%60CSS%20var()%60%22)" target="_blank" rel="noopener noreferrer"><code>CSS var()</code></a> 在 CSS 中使用在行内 <code>style</code> 上定义的<strong>自定义属性</strong>，对应的 HTML 部分： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa711b8dbf8d471a8b4207920b4f0886~tplv-k3u1fbpfcp-zoom-1.image" alt=""> CSS 部分: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f98267f2168e4316b5ad78add7d2d6d3~tplv-k3u1fbpfcp-zoom-1.image" alt=""></li><li>通过<strong>动态更新</strong> <code>color</code> 变量来实现行内 <code>style</code> 属性值的变化，进而改变使用了该 CSS 自定义属性的 HTML 元素样式</li></ul><p>那么，显然要完成这一整个过程，不同于在没有 <code>&lt;style&gt;</code> 动态变量注入前的 SFC 编译，这里需要对 <code>&lt;style&gt;</code>、<code>&lt;script&gt;</code> 增加相应的<strong>特殊处理</strong>。下面，我们分 2 点来讲解：</p><p><strong>1.SFC 编译 <code>&lt;style&gt;</code> 相关处理</strong></p><p>大家都知道的是在 Vue SFC 的 <code>&lt;style&gt;</code> 部分编译主要是由 <code>postcss</code> 完成的。而这在 Vue 源码中对应着 <code>packages/compiler-sfc/sfc/compileStyle.ts</code> 中的 <code>doCompileStyle()</code> 方法。</p><p>这里，我们看一下其针对 <code>&lt;style&gt;</code> 动态变量注入的编译处理，对应的代码（伪代码）：</p><div class="language-typescript"><pre><code><span class="token comment">// packages/compiler-sfc/sfc/compileStyle.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doCompileStyle</span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> SFCAsyncStyleCompileOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> SFCStyleCompileResults <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>SFCStyleCompileResults<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    id<span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> options\n  <span class="token operator">...</span>\n  <span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token punctuation">(</span>postcssPlugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  plugins<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token function">cssVarsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> shortId<span class="token punctuation">,</span> isProd <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到，在使用 <code>postcss</code> 编译 <code>&lt;style&gt;</code> 之前会加入 <code>cssVarsPlugin</code> 插件，并给 <code>cssVarsPlugin</code> 传入 <code>shortId</code>（即 <code>scopedId</code> 替换掉 <code>data-v</code> 后的结果）和 <code>isProd</code>（是否处于生产环境）。</p><p><code>cssVarsPlugin</code> 则是使用了 <code>postcss</code> 插件提供的 <a href="https://github.com/postcss/postcss/blob/main/docs/writing-a-plugin.md#step-3-find-nodes" title="`Declaration` 方法" target="_blank" rel="noopener noreferrer"><code>Declaration</code> 方法</a>，来访问 <code>&lt;style&gt;</code> 中声明的所有 CSS 属性的值，每次访问通过正则来匹配 <code>v-bind</code> 指令的内容，然后再使用 <code>replace()</code> 方法将该属性值替换为 <code>var(--xxxx-xx)</code>，表现在上面这个例子会是这样：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c37482606930435bb5f9f8eee340c2a2~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><code>cssVarsPlugin</code> 插件的定义：</p><div class="language-typescript"><pre><code><span class="token comment">// packages/compiler-sfc/sfc/cssVars.ts</span>\n<span class="token keyword">const</span> cssVarRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\bv-bind\\(\\s*(?:&#39;([^&#39;]+)&#39;|&quot;([^&quot;]+)&quot;|([^&#39;&quot;][^)]*))\\s*\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> cssVarsPlugin<span class="token operator">:</span> PluginCreator<span class="token operator">&lt;</span>CssVarsPluginOptions<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> isProd <span class="token punctuation">}</span> <span class="token operator">=</span> opts<span class="token operator">!</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    postcssPlugin<span class="token operator">:</span> <span class="token string">&quot;vue-sfc-vars&quot;</span><span class="token punctuation">,</span>\n    <span class="token function">Declaration</span><span class="token punctuation">(</span>decl<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// rewrite CSS variables</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>cssVarRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>decl<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        decl<span class="token punctuation">.</span>value <span class="token operator">=</span> decl<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>cssVarRE<span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token punctuation">,</span> $<span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">var(--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genVarName</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> $<span class="token number">1</span> <span class="token operator">||</span> $<span class="token number">2</span> <span class="token operator">||</span> $<span class="token number">3</span><span class="token punctuation">,</span> isProd<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>这里 CSS <code>var()</code> 的变量名即 <code>--</code>（之后的内容）是由 <code>genVarName()</code> 方法生成，它会根据 <code>isProd</code> 为 <code>true</code> 或 <code>false</code> 生成不同的值：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/compiler-sfc/sfc/cssVars.ts</span>\n<span class="token keyword">function</span> <span class="token function">genVarName</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> string<span class="token punctuation">,</span> raw<span class="token operator">:</span> string<span class="token punctuation">,</span> isProd<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isProd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">hash</span><span class="token punctuation">(</span>id <span class="token operator">+</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>raw<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^\\w-])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>2.SFC 编译 <code>&lt;script&gt;</code> 相关处理</strong></p><p>如果，仅仅站在 <code>&lt;script&gt;</code> 的角度，显然是<strong>无法感知</strong>当前 SFC 是否使用了 <code>&lt;style&gt;</code> 动态变量注入。所以，需要从 SFC 出发来标识当前是否使用了 <code>&lt;style&gt;</code> 动态变量注入。</p><p>在 <code>packages/compiler-sfc/parse.ts</code> 中的 <code>parse</code> 方法中会对解析 SFC 得到的 <code>descriptor</code> 对象调用 <code>parseCssVars()</code> 方法来获取 <code>&lt;style&gt;</code> 中使用到 <code>v-bind</code> 的所有变量。</p><blockquote><p><code>descriptor</code> 指的是解析 SFC 后得到的包含 <code>script</code>、<code>style</code>、<code>template</code> 属性的对象，每个属性包含了 SFC 中每个块（Block）的信息，例如 <code>&lt;style&gt;</code> 的属性 <code>scoped</code> 和内容等。</p></blockquote><p>对应的 <code>parse()</code> 方法中部分代码（伪代码）：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/compiler-sfc/parse.ts</span>\n<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    sourceMap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    filename <span class="token operator">=</span> <span class="token string">&quot;anonymous.vue&quot;</span><span class="token punctuation">,</span>\n    sourceRoot <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n    pad <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    compiler <span class="token operator">=</span> CompilerDOM<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token operator">:</span> SFCParseOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> SFCParseResult <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  descriptor<span class="token punctuation">.</span>cssVars <span class="token operator">=</span> <span class="token function">parseCssVars</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>cssVars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warnExperimental</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">v-bind() CSS variable injection</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到，这里会将 <code>parseCssVars()</code> 方法返回的结果（数组）赋值给 <code>descriptor.cssVars</code>。然后，在编译 <code>script</code> 的时候，根据 <code>descriptor.cssVars.length</code> 判断是否注入 <code>&lt;style&gt;</code> 动态变量注入相关的代码。</p><p>而编译 <code>script</code> 是由 <code>package/compile-sfc/src/compileScript.ts</code> 中的 <code>compileScript</code> 方法完成，这里我们看一下其针对 <code>&lt;style&gt;</code> 动态变量注入的处理：</p><div class="language-javascript"><pre><code><span class="token comment">// package/compile-sfc/src/compileScript.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileScript</span><span class="token punctuation">(</span>\n  <span class="token parameter">sfc<span class="token operator">:</span> SFCDescriptor<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> SFCScriptCompileOptions</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> SFCScriptBlock <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token keyword">const</span> cssVars <span class="token operator">=</span> sfc<span class="token punctuation">.</span>cssVars<span class="token punctuation">;</span>\n  <span class="token comment">//...</span>\n  <span class="token keyword">const</span> needRewrite <span class="token operator">=</span> cssVars<span class="token punctuation">.</span>length <span class="token operator">||</span> hasInheritAttrsFlag<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> content <span class="token operator">=</span> script<span class="token punctuation">.</span>content<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>needRewrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cssVars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      content <span class="token operator">+=</span> <span class="token function">genNormalScriptCssVarsCode</span><span class="token punctuation">(</span>\n        cssVars<span class="token punctuation">,</span>\n        bindings<span class="token punctuation">,</span>\n        scopeId<span class="token punctuation">,</span>\n        <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>isProd\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于前面我们举的例子（使用了 <code>&lt;style&gt;</code> 动态变量注入），显然 <code>cssVars.length</code> 是存在的，所以这里会调用 <code>genNormalScriptCssVarsCode()</code> 方法来生成对应的代码。</p><p><code>genNormalScriptCssVarsCode()</code> 的定义：</p><div class="language-javascript"><pre><code><span class="token comment">// package/compile-sfc/src/cssVars.ts</span>\n<span class="token keyword">const</span> <span class="token constant">CSS_VARS_HELPER</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">useCssVars</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">genNormalScriptCssVarsCode</span><span class="token punctuation">(</span>\n  <span class="token parameter">cssVars<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  bindings<span class="token operator">:</span> BindingMetadata<span class="token punctuation">,</span>\n  id<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  isProd<span class="token operator">:</span> boolean</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\nimport { </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CSS_VARS_HELPER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> as _</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">CSS_VARS_HELPER</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> } from &#39;vue&#39;\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const __injectCSSVars__ = () =&gt; {\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genCssVarsCode</span><span class="token punctuation">(</span>\n      cssVars<span class="token punctuation">,</span>\n      bindings<span class="token punctuation">,</span>\n      id<span class="token punctuation">,</span>\n      isProd\n    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const __setup__ = __default__.setup\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">__default__.setup = __setup__\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ? (props, ctx) =&gt; { __injectCSSVars__();return __setup__(props, ctx) }\\n</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  : __injectCSSVars__\\n</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>genNormalScriptCssVarsCode()</code> 方法主要做了这 3 件事：</p><ul><li>引入 <code>useCssVars()</code> 方法，其主要是监听 <code>watchEffect</code> 动态注入的变量，然后再更新对应的 CSS <code>Vars()</code> 的值</li><li>定义 <code>__injectCSSVars__</code> 方法，其主要是调用了 <code>genCssVarsCode()</code> 方法来生成 <code>&lt;style&gt;</code> 动态样式相关的代码</li><li>兼容非 <code>&lt;script setup&gt;</code> 情况下的组合 API 使用（对应这里 <code>__setup__</code>），如果它存在则重写 <code>__default__.setup</code> 为 <code>(props, ctx) =&gt; { __injectCSSVars__();return __setup__(props, ctx) }</code></li></ul><p>那么，到这里我们就已经大致分析完 SFC 编译对 <code>&lt;style&gt;</code> 动态变量注入的处理，其中部分逻辑并没有过多展开讲解（避免陷入套娃的情况），有兴趣的同学可以自行了解。下面，我们就针对前面这个例子，看一下 SFC 编译结果会是什么？</p><h2 id="sfc-编译结果分析"><a class="header-anchor" href="#sfc-编译结果分析" aria-hidden="true">#</a> SFC 编译结果分析</h2><p>这里，我们直接通过 Vue 官方的 <a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8aDE+e3sgbXNnIH19PC9oMT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBtc2cgPSAnSGVsbG8gV29ybGQhJ1xuPC9zY3JpcHQ+In0=" title="SFC Playground" target="_blank" rel="noopener noreferrer">SFC Playground</a> 来查看上面这个例子经过 <strong>SFC 编译</strong>后输出的代码：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCssVars <span class="token keyword">as</span> _useCssVars<span class="token punctuation">,</span> unref <span class="token keyword">as</span> _unref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  toDisplayString <span class="token keyword">as</span> _toDisplayString<span class="token punctuation">,</span>\n  createVNode <span class="token keyword">as</span> _createVNode<span class="token punctuation">,</span>\n  Fragment <span class="token keyword">as</span> _Fragment<span class="token punctuation">,</span>\n  openBlock <span class="token keyword">as</span> _openBlock<span class="token punctuation">,</span>\n  createBlock <span class="token keyword">as</span> _createBlock<span class="token punctuation">,</span>\n  withScopeId <span class="token keyword">as</span> _withScopeId<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> _withId <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_withScopeId</span><span class="token punctuation">(</span><span class="token string">&quot;data-v-f13b4d11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> __sfc__ <span class="token operator">=</span> <span class="token punctuation">{</span>\n  expose<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">__props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">_useCssVars</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string">&quot;f13b4d11-color&quot;</span><span class="token operator">:</span> <span class="token function">_unref</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        color<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        color<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function">_createBlock</span><span class="token punctuation">(</span>\n          _Fragment<span class="token punctuation">,</span>\n          <span class="token keyword">null</span><span class="token punctuation">,</span>\n          <span class="token punctuation">[</span>\n            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;word&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> onClick<span class="token operator">:</span> changeColor <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot; click me &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n__sfc__<span class="token punctuation">.</span>__scopeId <span class="token operator">=</span> <span class="token string">&quot;data-v-f13b4d11&quot;</span><span class="token punctuation">;</span>\n__sfc__<span class="token punctuation">.</span>__file <span class="token operator">=</span> <span class="token string">&quot;App.vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> __sfc__<span class="token punctuation">;</span>\n</code></pre></div><p>可以看到 SFC 编译的结果，输出了单文件对象 <code>__sfc__</code>、<code>render</code> 函数、<code>&lt;style&gt;</code> 动态变量注入等相关的代码。那么抛开前两者，我们直接看 <code>&lt;style&gt;</code> 动态变量注入相关的代码：</p><div class="language-javascript"><pre><code><span class="token function">_useCssVars</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;f13b4d11-color&quot;</span><span class="token operator">:</span> <span class="token function">_unref</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这里调用了 <code>_useCssVars()</code> 方法，即在源码中指的是 <code>useCssVars()</code> 方法，然后传入了一个函数，该函数会返回一个对象 <code>{ &quot;f13b4d11-color&quot;: (_unref(color)) }</code>。那么，下面我们来看一下 <code>useCssVars()</code> 方法。</p><h3 id="usecssvars"><a class="header-anchor" href="#usecssvars" aria-hidden="true">#</a> useCssVars</h3><p><code>useCssVars()</code> 方法是定义在 <code>runtime-dom/src/helpers/useCssVars.ts</code> 中：</p><div class="language-javascript"><pre><code><span class="token comment">// runtime-dom/src/helpers/useCssVars.ts</span>\n<span class="token keyword">function</span> <span class="token function">useCssVars</span><span class="token punctuation">(</span><span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__BROWSER__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__TEST__<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    __DEV__ <span class="token operator">&amp;&amp;</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">useCssVars is called without current active component instance.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">setVars</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token function">setVarsOnVNode</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> <span class="token function">getter</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span>setVars<span class="token punctuation">,</span> <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token function">onUpdated</span><span class="token punctuation">(</span>setVars<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>useCssVars</code> 主要做了这 4 件事：</p><ul><li>获取当前组件实例 <code>instance</code>，用于后续操作组件实例的 VNode Tree，即 <code>instance.subTree</code></li><li>定义 <code>setVars()</code> 方法，它会调用 <code>setVarsOnVNode()</code> 方法，并将 <code>instance.subTree</code>、接收到的 <code>getter()</code> 方法传入</li><li>在 <code>onMounted()</code> 生命周期中添加 <code>watchEffect</code>，每次挂载组件的时候都会调用 <code>setVars()</code> 方法</li><li>在 <code>onUpdated()</code> 生命周期中添加 <code>setVars()</code> 方法，每次组件更新的时候都会调用 <code>setVars()</code> 方法</li></ul><p>可以看到，无论是 <code>onMounted()</code> 或者 <code>onUpdated()</code> 生命周期，它们都会调用 <code>setVars()</code> 方法，本质上也就是 <code>setVarsOnVNode()</code> 方法，我们先来看一下它的定义：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-dom/src/helpers/useCssVars.ts</span>\n<span class="token keyword">function</span> <span class="token function">setVarsOnVNode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span> vars<span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_SUSPENSE__ <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">SUSPENSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> suspense <span class="token operator">=</span> vnode<span class="token punctuation">.</span>suspense<span class="token operator">!</span>\n    vnode <span class="token operator">=</span> suspense<span class="token punctuation">.</span>activeBranch<span class="token operator">!</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>suspense<span class="token punctuation">.</span>pendingBranch <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>suspense<span class="token punctuation">.</span>isHydrating<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      suspense<span class="token punctuation">.</span>effects<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setVarsOnVNode</span><span class="token punctuation">(</span>suspense<span class="token punctuation">.</span>activeBranch<span class="token operator">!</span><span class="token punctuation">,</span> vars<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vnode <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token punctuation">.</span>subTree\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> style <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>style\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> vars<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> vars<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">;</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children <span class="token keyword">as</span> VNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token function">setVarsOnVNode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> vars<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于前面我们这个例子，由于初始传入的是 <code>instance.subtree</code>，它的 <code>type</code> 为 <code>Fragment</code>。所以，在 <code>setVarsOnVNode()</code> 方法中会命中 <code>vnode.type === Fragment</code> 的逻辑，然后遍历 <code>vnode.children</code> 递归调用 <code>setVarsOnVNode()</code> 方法。</p><blockquote><p>这里不对 <code>__FEATURE_SUSPENSE__</code> 和 <code>vnode.component</code> 情况做展开分析，有兴趣的同学可以自行了解</p></blockquote><p>而在后续的 <code>setVarsOnVNode()</code> 方法的执行，如果满足 <code>vnode.shapeFlag &amp; ShapeFlags.ELEMENT &amp;&amp; vnode.el</code> 的逻辑，则会调用 <code>style.setProperty()</code> 方法来给每个 VNode 对应的 DOM（<code>vnode.el</code>）添加行内的 <code>style</code>，其中 <code>key</code> 是先前处理 <code>&lt;style&gt;</code> 时 <code>CSS var()</code> 的值，<code>value</code> 则对应着 <code>&lt;script&gt;</code> 中定义的变量的值。</p><p>这样一来，就完成了整个从 <code>&lt;script&gt;</code> 中的变量变化到 <code>&lt;style&gt;</code> 中样式变化的联动。这里我们用一张图简单回顾一下这个过程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d35a4dba22e74eb3a00d69385b49bd4c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果，简单地概括 <code>&lt;style&gt;</code> 动态变量注入的话，可能几句话就可以表达。但是，其在源码层面又是怎么做的？这是很值得深入了解的，通过这我们可以懂得如何编写 <code>postcss</code> 插件、CSS <code>vars()</code> 是什么等技术点。</p><p>并且，原本打算留有一个小节用于介绍如何手写一个 Vite 插件 <a href="https://www.npmjs.com/package/vite-plugin-vue2-css-vars" title="vite-plugin-vue2-css-vars" target="_blank" rel="noopener noreferrer">vite-plugin-vue2-css-vars</a>，让 Vue 2.x 也可以支持 <code>&lt;style&gt;</code> 动态变量注入。但是，考虑到文章篇幅太长可能会给大家造成阅读上的障碍。所以，这会在下一篇文章中介绍，不过目前这个插件已经发到 NPM 上了，有兴趣的同学也可以自行了解。</p>',62);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
