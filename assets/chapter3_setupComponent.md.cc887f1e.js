import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"setupComponent","description":"","frontmatter":{},"headers":[{"level":2,"title":"setupStatefulComponent","slug":"setupstatefulcomponent"},{"level":2,"title":"handleSetupResult","slug":"handlesetupresult"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter3/setupComponent.md","lastUpdated":1628927998784}',p={},o=a('<h1 id="setupcomponent"><a class="header-anchor" href="#setupcomponent" aria-hidden="true">#</a> setupComponent</h1><p><code>setupComponent()</code> 的定义：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-core/src/component.ts</span>\n<span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span> isSSR <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  isInSSRComponentSetup <span class="token operator">=</span> isSSR<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> isStateful <span class="token operator">=</span> shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">;</span> <span class="token comment">// {A}</span>\n  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> props<span class="token punctuation">,</span> isStateful<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {B}</span>\n  <span class="token function">initSlots</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {C}</span>\n\n  <span class="token keyword">const</span> setupResult <span class="token operator">=</span> isStateful\n    <span class="token operator">?</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// {D}</span>\n  isInSSRComponentSetup <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> setupResult<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>抛开 <code>SSR</code> 的逻辑，B 行和 C 行会先初始化组件的 <code>props</code> 和 <code>slots</code>。然后，在 A 行判断 <code>shapeFlag</code> 为 <code>true</code> 时，调用 <code>setupStatefulComponent()</code>。</p><blockquote><p>这里又用到了 <code>shapeFlag</code>，所以需要强调的是 <code>shapeFlag</code> 和 <code>patchFlag</code> 具有一样的地位（重要性）。</p></blockquote><p>而 <code>setupStatefulComponent()</code> 则会处理组合 <code>Composition API</code>，即调用 <code>setup()</code>。</p><h2 id="setupstatefulcomponent"><a class="header-anchor" href="#setupstatefulcomponent" aria-hidden="true">#</a> setupStatefulComponent</h2><p><code>setupStatefulComponent()</code> 定义（伪代码）：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-core/src/component.ts</span>\n<span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>\n  <span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span>type <span class="token keyword">as</span> ComponentOptions\n  <span class="token comment">// {A} 验证逻辑</span>\n  <span class="token operator">...</span>\n  instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> PublicInstanceProxyHandlers<span class="token punctuation">)</span>\n  <span class="token operator">...</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> setup <span class="token punctuation">}</span> <span class="token operator">=</span> Component\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> setupContext <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>setupContext <span class="token operator">=</span>\n      setup<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">createSetupContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n\n    currentInstance <span class="token operator">=</span> instance <span class="token comment">// {B}</span>\n    <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// {C}</span>\n    <span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>\n      setup<span class="token punctuation">,</span>\n      instance<span class="token punctuation">,</span>\n      ErrorCodes<span class="token punctuation">.</span><span class="token constant">SETUP_FUNCTION</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span>__DEV__ <span class="token operator">?</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token operator">:</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> setupContext<span class="token punctuation">]</span>\n    <span class="token punctuation">)</span> <span class="token comment">// {D}</span>\n    <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// {E}</span>\n    currentInstance <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span> <span class="token comment">// {F}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>首先，在 B 行会给当前实例 <code>currentInstance</code> 赋值为此时的组件实例 <code>instance</code>，在回收 <code>currentInstance</code> 之前，我们会做两个操作<strong>暂停依赖收集</strong>、<strong>恢复依赖收集</strong>：</p><p>暂停依赖收集 <code>pauseTracking()</code>：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/reactivity/src/effect.ts</span>\n<span class="token keyword">function</span> <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  trackStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shouldTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  shouldTrack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>恢复依赖收集 <code>resetTracking()</code>：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/reactivity/src/effect.ts</span>\n<span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> last <span class="token operator">=</span> trackStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  shouldTrack <span class="token operator">=</span> last <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> last\n<span class="token punctuation">}</span>\n</code></pre></div><p>本质上这两个步骤是通过改变 <code>shouldTrack</code> 的值为 <code>true</code> 或 <code>false</code> 来控制此时是否进行依赖收集。之所以，<code>shouldTrack</code> 可以控制是否进行依赖收集，是因为在 <code>track</code> 的执行开始有这么一段代码：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/reactivity/src/effect.ts</span>\n<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> object<span class="token punctuation">,</span> type<span class="token operator">:</span> TrackOpTypes<span class="token punctuation">,</span> key<span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>那么，我们就会提出疑问为什么这个时候需要<strong>暂停依赖收</strong>？这里，我们回到 D 行：</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>\n  setup<span class="token punctuation">,</span>\n  instance<span class="token punctuation">,</span>\n  ErrorCodes<span class="token punctuation">.</span><span class="token constant">SETUP_FUNCTION</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>__DEV__ <span class="token operator">?</span> <span class="token function">shallowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token operator">:</span> instance<span class="token punctuation">.</span>props<span class="token punctuation">,</span> setupContext<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {D}</span>\n</code></pre></div><p>在 <code>DEV</code> 环境下，我们需要通过 <code>shallowReadonly(instance.props)</code> 创建一个基于组件 <code>props</code> 的拷贝对象 <code>Proxy</code>，而 <code>props</code> 本质上是<strong>响应式地</strong>，这个时候会触发它的 <code>track</code> 逻辑，即依赖收集，明显这并<strong>不是开发中实际需要</strong>的订阅对象，所以，此时要暂停 <code>props</code> 的依赖收集，<strong>过滤不必要的订阅</strong>。</p><blockquote><p>相比较，「Vue2.x」泛滥的订阅关系而言，这里不得不给「Vue3」对订阅关系处理的严谨思维点赞！</p></blockquote><p>通常，我们 <code>setup()</code> 返回的是一个 <code>Object</code>，所以会命中 F 行的逻辑：</p><div class="language-javascript"><pre><code><span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> setupResult<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="handlesetupresult"><a class="header-anchor" href="#handlesetupresult" aria-hidden="true">#</a> handleSetupResult</h2><p><code>handleSetupResult()</code> 定义：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-core/src/component.ts</span>\n<span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>\n  <span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  setupResult<span class="token operator">:</span> unknown<span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> setupResult <span class="token keyword">as</span> InternalRenderFunction\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">isVNode</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setup() should not return VNodes directly - </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">return a render function instead.</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    instance<span class="token punctuation">.</span>setupState <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">exposeSetupStateOnRenderContext</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> setupResult <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">warn</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setup() should return an object. Received: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        setupResult <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;null&#39;</span> <span class="token operator">:</span> <span class="token keyword">typeof</span> setupResult\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> isSSR<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>handleSetupResult()</code> 的分支逻辑较为简单，主要是验证 <code>setup()</code> 返回的结果，以下两种情况都是<strong>不合法的</strong>：</p><ul><li><code>setup()</code> 返回的值是 <code>render()</code> 的执行结果，即 <code>VNode</code>。</li><li><code>setup()</code> 返回的值是 <code>null</code>、<code>undefined</code>或者其他非对象类型。</li></ul><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>到此，组件的开始安装过程就结束了。我们再来回顾一下这个过程会做的几件事，初始化 <code>props</code>、<code>slot</code>以及处理 <code>setup()</code> 返回的结果，期间还涉及到一个暂停依赖收集的微妙处理。</p><p>需要注意的是，此时组件并<strong>没有开始创建</strong>，因此我们称之为这个过程为<strong>安装</strong>。并且，这也是为什么官方文档会这么介绍 <code>setup()</code>：</p><blockquote><p>一个组件选项，<strong>在创建组件之前执行</strong>，一旦 props 被解析，并作为组合 API 的入口点</p></blockquote>',31);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
