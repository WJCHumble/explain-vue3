import{l as n,f as s,g as a,t as p,G as t,s as o}from"./framework.5c8a4622.js";const e='{"title":"transform","description":"","frontmatter":{},"headers":[{"level":2,"title":"静态节点 transform","slug":"静态节点-transform"},{"level":2,"title":"动态节点 transform","slug":"动态节点-transform"}],"relativePath":"chapter2/transform.md","lastUpdated":1628927998784}',c={},l=t('<h1 id="transform"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> transform</h1><p>熟悉 Vue 2.x 版本源码的同学应该都知道它的 <code>compile</code> 阶段是没有 <code>transform</code> 过程的处理。而 <code>transform</code> 恰恰是整个 Vue 3 提高 <code>VNode</code> 更新性能实现的基础。因为，在这个阶段，会对 <code>baseCompiler</code> 后生成的 AST Element 打上优化标识 <code>patchFlag</code>，以及 <code>isBlock</code> 的判断。</p><blockquote><p>实际上 Vue 3 的 <code>transfrom</code> 并不是无米之炊，它本质上是 Vue 2.x <code>compiler</code> 阶段的 <code>optimize</code> 的升级版。</p></blockquote><p>这里我们将对 AST Elment 的 <code>transform</code> 分为两类：</p><ul><li>静态节点 <code>transform</code> 应用，即节点不含有插值、指令、props、动态样式的绑定等。</li><li>动态节点 <code>transform</code> 应用，即节点含有插值、指令、props、动态样式的绑定等。</li></ul><h2 id="静态节点-transform"><a class="header-anchor" href="#静态节点-transform" aria-hidden="true">#</a> 静态节点 transform</h2><p>那么，首先是静态节点 <code>transform</code> 应用。对于上面我们说到的这个栗子，静态节点就是 <code>&lt;div&gt;hi vue3&lt;/div&gt;</code>这部分。而它在没有进行 <code>transformText</code> 之前，它对应的 AST 会是这样：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    content<span class="token operator">:</span> <span class="token string">&quot;hi vue3&quot;</span>\n    loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;hi vue3&quot;</span><span class="token punctuation">}</span>\n    type<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  isSelfClosing<span class="token operator">:</span> <span class="token boolean">false</span>\n  loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;hi vue3&lt;/div&gt;&quot;</span><span class="token punctuation">}</span>\n  ns<span class="token operator">:</span> <span class="token number">0</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  tag<span class="token operator">:</span> <span class="token string">&quot;div&quot;</span>\n  tagType<span class="token operator">:</span> <span class="token number">0</span>\n  type<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看出，此时它的 <code>codegenNode</code> 是 <code>undefined</code>。而在 <code>transform</code> 阶段则会根据 AST 递归应用对应的 <code>plugin</code>，然后，创建对应 AST Element 的 <code>codegen</code> 对象。所以，此时我们会命中 <code>transformElement</code> 和 <code>transformText</code> 的逻辑。</p><p><strong>transformText</strong></p><p><code>transformText</code> 顾名思义，它和<strong>文本</strong>相关。很显然，我们此时 AST Element 所属的类型就是 Text。那么，我们先来看一下 <code>transformText</code> 函数对应的伪代码：</p><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> transformText<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">||</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span> <span class="token operator">||</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF_BRANCH</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children\n      <span class="token keyword">let</span> currentContainer<span class="token operator">:</span> CompoundExpressionNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span>\n      <span class="token keyword">let</span> hasText <span class="token operator">=</span> <span class="token boolean">false</span>\n\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// {1}</span>\n        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          hasText <span class="token operator">=</span> <span class="token boolean">true</span>\n          <span class="token operator">...</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token operator">!</span>hasText <span class="token operator">||</span>\n        <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n          <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span> <span class="token operator">||</span>\n            <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span>\n              node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// {2}</span>\n        <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到，这里我们会命中 {2} 逻辑，即如果对于节点含有单一文本 <code>transformText</code> 并不需要进行额外的处理。该节点仍然和 Vue 2.x 版本一样，会交给 <code>runtime</code> 时的 <code>render</code> 函数处理。</p><blockquote><p>至于 <code>transfromText</code> 真正发挥作用的场景是当存在 <code>&lt;div&gt;ab {a} {b}&lt;/div&gt;</code> 情况时，它需要将两者放在一个单独的 AST Element（Compound Expression） 下。</p></blockquote><p><strong>transformElement</strong></p><p><code>transformElement</code> 是一个所有 AST Element 都会被执行的一个 <code>plugin</code>，它的核心是为 AST Element 生成最基础的 <code>codegen</code>属性。例如标识出对应 <code>patchFlag</code>，从而为生成 <code>VNode</code> 提供依据，即 <code>dynamicChildren</code>。</p><p>而对于静态节点，同样只是起到一个初始化它的 <code>codegenNode</code> 属性的作用。并且，从上面介绍的 <code>patchFlag</code> 的类型，我们可以知道它的 <code>patchFlag</code> 为默认值 <code>0</code>。所以，它的 <code>codegenNode</code> 属性值看起来会是这样：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  children<span class="token operator">:</span> <span class="token punctuation">{</span>\n    content<span class="token operator">:</span> <span class="token string">&quot;hi vue3&quot;</span>\n    loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;hi vue3&quot;</span><span class="token punctuation">}</span>\n    type<span class="token operator">:</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n  directives<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  disableTracking<span class="token operator">:</span> <span class="token boolean">false</span>\n  dynamicProps<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  isBlock<span class="token operator">:</span> <span class="token boolean">false</span>\n  loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;hi vue3&lt;/div&gt;&quot;</span><span class="token punctuation">}</span>\n  patchFlag<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  props<span class="token operator">:</span> <span class="token keyword">undefined</span>\n  tag<span class="token operator">:</span> <span class="token string">&quot;&quot;</span>div<span class="token string">&quot;&quot;</span>\n  type<span class="token operator">:</span> <span class="token number">13</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="动态节点-transform"><a class="header-anchor" href="#动态节点-transform" aria-hidden="true">#</a> 动态节点 transform</h2>',19),u=o("接下来是动态节点 "),r=a("code",null,"transform",-1),k=o(" 应用。这里，我们的动态节点是 "),i=o("。它在 "),d=a("code",null,"baseParse",-1),m=o(" 后对应的 AST 会是这样："),g=t('<div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  children<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      content<span class="token operator">:</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> isStatic<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> isConstant<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> loc<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">}</span>\n      loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;{{msg}}&quot;</span><span class="token punctuation">}</span>\n      type<span class="token operator">:</span> <span class="token number">5</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  codegenNode<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  isSelfClosing<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  loc<span class="token operator">:</span> <span class="token punctuation">{</span>start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;{{msg}}&lt;/div&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  ns<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  tag<span class="token operator">:</span> <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>\n  tagType<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',1),f=o("很显然 "),h=o(" 也是文本，所以也会命中和 "),T=a("code",null,"hi vue3",-1),y=o(" 一样的 "),v=a("code",null,"transformText",-1),b=o(" 函数的逻辑。"),q=t('<blockquote><p>这里就不对 <code>transformText</code> 做展开，因为表现和 <code>hi vue3</code> 一样。</p></blockquote><p><strong>transformElements</strong></p><p>此时，对于插值文本，<code>transfromElements</code> 的价值就会体现出来了。而针对存在单一节点的插值文本，它会两件事：</p><ul><li>标识 <code>patchFlag</code> 为 <code>1 /* TEXT */</code>，即动态的文本内容。</li><li>将插值文本对应的 AST Element 赋值给 <code>VNodeChildren</code>。</li></ul><p>具体在源码中的表现会是这样（伪代码）：</p><div class="language-javascript"><pre><code>    <span class="token operator">...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> vnodeTag <span class="token operator">!==</span> <span class="token constant">TELEPORT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n        <span class="token keyword">const</span> type <span class="token operator">=</span> child<span class="token punctuation">.</span>type\n        <span class="token comment">// check for dynamic text children</span>\n        <span class="token keyword">const</span> hasDynamicTextChild <span class="token operator">=</span>\n          type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span>\n          type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicTextChild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getStaticType</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDynamicTextChild <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            vnodeChildren <span class="token operator">=</span> child<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n        <span class="token comment">// bitwise flags</span>\n        <span class="token keyword">const</span> flagNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>PatchFlagNames<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> patchFlag <span class="token operator">&amp;</span> n<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> PatchFlagNames<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        vnodePatchFlag <span class="token operator">=</span> patchFlag <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> /* </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagNames<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */</span><span class="token template-punctuation string">`</span></span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n    node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>\n      context<span class="token punctuation">,</span>\n      vnodeTag<span class="token punctuation">,</span>\n      vnodeProps<span class="token punctuation">,</span>\n      vnodeChildren<span class="token punctuation">,</span>\n      vnodePatchFlag<span class="token punctuation">,</span>\n      vnodeDynamicProps<span class="token punctuation">,</span>\n      vnodeDirectives<span class="token punctuation">,</span>\n      <span class="token operator">!</span><span class="token operator">!</span>shouldUseBlock<span class="token punctuation">,</span>\n      <span class="token boolean">false</span> <span class="token comment">/* disableTracking */</span><span class="token punctuation">,</span>\n      node<span class="token punctuation">.</span>loc\n    <span class="token punctuation">)</span>\n</code></pre></div><p>可以看到，处理后的 <code>vnodePatchFlag</code> 和 <code>vnodeChildren</code> 是作为参数传入 <code>createVNodeCall</code>，而 <code>createVNode</code> 最终会将这些参数转化为 AST Element 上属性的值，例如 <code>children</code>、<code>patchFlag</code>。所以，<code>transformElement</code> 处理后，其生成对应的 <code>codegenNode</code> 属性值会是这样：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n  children<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    isStatic<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    isConstant<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span>\n    loc<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  directives<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  dynamicProps<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  isBlock<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  isForBlock<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  loc<span class="token operator">:</span> <span class="token punctuation">{</span>\n    start<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    end<span class="token operator">:</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    source<span class="token operator">:</span> <span class="token string">&quot;&lt;div&gt;{{msg}}&lt;/div&gt;&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  patchFlag<span class="token operator">:</span> <span class="token string">&quot;1 /* TEXT */&quot;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  tag<span class="token operator">:</span> <span class="token string">&quot;&quot;</span>div<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token number">13</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',8);c.render=function(t,o,e,c,_,E){return n(),s("div",null,[l,a("p",null,[u,r,k,a("code",null,"<div>"+p(t.msg)+"</div>",1),i,d,m]),g,a("p",null,[f,a("code",null,p(t.msg),1),h,T,y,v,b]),q])};export default c;export{e as __pageData};
