import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"finishComponentSetup","description":"","frontmatter":{},"headers":[{"level":2,"title":"applyOptions","slug":"applyoptions"},{"level":2,"title":"注册事件（methods）","slug":"注册事件（methods）"},{"level":2,"title":"绑定计算属性（computed）","slug":"绑定计算属性（computed）"},{"level":2,"title":"生命周期处理","slug":"生命周期处理"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter3/finishComponentSetup.md","lastUpdated":1628927998784}',p={},o=a('<h1 id="finishcomponentsetup"><a class="header-anchor" href="#finishcomponentsetup" aria-hidden="true">#</a> finishComponentSetup</h1><p><code>finishComponentSetup()</code> 定义（伪代码）：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-core/src/component.ts</span>\n<span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>\n  <span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  isSSR<span class="token operator">:</span> boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> Component <span class="token operator">=</span> instance<span class="token punctuation">.</span>type <span class="token keyword">as</span> ComponentOptions\n  <span class="token operator">...</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// {A}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>compile <span class="token operator">&amp;&amp;</span> Component<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Component<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>\n      Component<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        isCustomElement<span class="token operator">:</span> instance<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>config<span class="token punctuation">.</span>isCustomElement <span class="token operator">||</span> <span class="token constant">NO</span><span class="token punctuation">,</span>\n        delimiters<span class="token operator">:</span> Component<span class="token punctuation">.</span>delimiters\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n\n    instance<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>render <span class="token operator">||</span> <span class="token constant">NOOP</span><span class="token punctuation">)</span> <span class="token keyword">as</span> InternalRenderFunction <span class="token comment">// {B}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">.</span>_rc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      instance<span class="token punctuation">.</span>withProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>\n        instance<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>\n        RuntimeCompiledPublicInstanceProxyHandlers\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__FEATURE_OPTIONS_API__<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// {C}</span>\n    currentInstance <span class="token operator">=</span> instance\n    <span class="token function">applyOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Component<span class="token punctuation">)</span>\n    currentInstance <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>整体上 <code>finishComponentSetup()</code> 可以分为三个核心逻辑：</p><ul><li>绑定 <code>render</code> 函数到当前实例 <code>instance</code> 上（行 A），这会两种情况，一是手写 <code>render</code> 函数，二是模板 <code>template</code> 写法，它会调用 <code>compile</code> 编译模板生成 <code>render</code> 函数。</li><li>为模板 <code>template</code> 生成的 <code>render</code> 函数（行 B），单独使用一个不同的 <code>has</code> 陷阱。因为，编译生成的 <code>render</code> 函数是会存在 <code>withBlock</code> 之类的优化，以及它会有一个全局的白名单来实现避免进入 <code>has</code> 陷阱。</li><li>应用 <code>options</code>（行 C），即对应的 <code>computed</code>、<code>watch</code>、<code>lifecycle</code> 等等。</li></ul><h2 id="applyoptions"><a class="header-anchor" href="#applyoptions" aria-hidden="true">#</a> applyOptions</h2><p><code>applyOptions()</code> 定义：</p><div class="language-javascript"><pre><code><span class="token comment">// packages/runtime-core/src/componentOptions.ts</span>\n<span class="token keyword">function</span> <span class="token function">applyOptions</span><span class="token punctuation">(</span>\n  <span class="token parameter">instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span>\n  options<span class="token operator">:</span> ComponentOptions<span class="token punctuation">,</span>\n  deferredData<span class="token operator">:</span> DataFn<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  deferredWatch<span class="token operator">:</span> ComponentWatchOptions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  asMixin<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>由于， <code>applyOptions()</code> 涉及的代码较多，我们先不看代码，看一下整体的流程： <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0075fcccf644b17a44055ff45d5dc2e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p><code>applyOptions()</code> 的流程并不复杂，但是从流程中我们总结出<strong>两点</strong>平常开发中忌讳的点：</p><ul><li>不要在 <code>beforeCreate</code> 中访问 <code>mixin</code> 相关变量。</li><li>由于本地 <code>mixin</code> 后于全局 <code>mixin</code> 执行，所以在一些变量命名重复的场景，我们需要确认要使用的是全局 <code>mixin</code> 的这个变量还是本地的 <code>mixin</code>。</li></ul><blockquote><p>对于 <code>mixin</code> 重名时选择本地还是全局的处理，有兴趣的同学可以去官方文档了解。</p></blockquote><p>我们再从代码层面看整个流程，这里分析几点常关注的属性是怎么初始化的：</p><h2 id="注册事件（methods）"><a class="header-anchor" href="#注册事件（methods）" aria-hidden="true">#</a> 注册事件（methods）</h2><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> methodHandler <span class="token operator">=</span> <span class="token punctuation">(</span>methods <span class="token keyword">as</span> MethodOptions<span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>methodHandler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      ctx<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">methodHandler</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">)</span> <span class="token comment">// {A}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        checkDuplicateProperties<span class="token operator">!</span><span class="token punctuation">(</span>OptionTypes<span class="token punctuation">.</span><span class="token constant">METHODS</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Method &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; has type &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">typeof</span> methodHandler<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; in the component definition. </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Did you reference the function correctly?</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>事件的注册，主要就是遍历已经处理好的 <code>methods</code> 属性，然后在当前上下文 <code>ctx</code> 中绑定对应事件名的属性 <code>key</code> 的事件 <code>methodHandler</code>（行 A）。并且，<strong>在开发环境下</strong>会对当前上下文属性的唯一性进行判断。</p><h2 id="绑定计算属性（computed）"><a class="header-anchor" href="#绑定计算属性（computed）" aria-hidden="true">#</a> 绑定计算属性（computed）</h2><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>computedOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> computedOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token punctuation">(</span>computedOptions <span class="token keyword">as</span> ComputedOptions<span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n      <span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span>\n        <span class="token operator">?</span> <span class="token function">opt</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">,</span> publicThis<span class="token punctuation">)</span>\n        <span class="token operator">:</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>get<span class="token punctuation">)</span>\n          <span class="token operator">?</span> opt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">,</span> publicThis<span class="token punctuation">)</span>\n          <span class="token operator">:</span> <span class="token constant">NOOP</span> <span class="token comment">// {A}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> get <span class="token operator">===</span> <span class="token constant">NOOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Computed property &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; has no getter.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> set <span class="token operator">=</span>\n        <span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>set<span class="token punctuation">)</span>\n          <span class="token operator">?</span> opt<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">)</span>\n          <span class="token operator">:</span> __DEV__\n            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token function">warn</span><span class="token punctuation">(</span>\n                  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Write operation failed: computed property &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is readonly.</span><span class="token template-punctuation string">`</span></span>\n                <span class="token punctuation">)</span>\n              <span class="token punctuation">}</span>\n            <span class="token operator">:</span> <span class="token constant">NOOP</span> <span class="token comment">// {B}</span>\n      <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        get<span class="token punctuation">,</span>\n        set\n      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// {C}</span>\n      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>value <span class="token operator">=</span> v<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token constant">D</span><span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        checkDuplicateProperties<span class="token operator">!</span><span class="token punctuation">(</span>OptionTypes<span class="token punctuation">.</span><span class="token constant">COMPUTED</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><p>绑定计算属性主要是遍历构建好的 <code>computedOptions</code>，然后提取每一个计算属性 <code>key</code> 对应的 <code>get</code> 和 <code>set</code>（行 A），也是我们熟悉的对于 <code>get</code> 是<strong>强校验</strong>，即计算属性<strong>必须要有 <code>get</code></strong>，<strong>可以没有 <code>set</code></strong>，如果没有 <code>set</code>（行 B），此时它的 <code>set</code> 为：</p><div class="language-javascript"><pre><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Write operation failed: computed property &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is readonly.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><blockquote><p>所以，这也是为什么我们修改一个没有定义 <code>set</code> 的计算属性时会提示这样的错误。</p></blockquote><p>然后，在 C 行会调用 <code>computed</code> 注册该计算属性，即 <code>effect</code> 的注册。最后，将该计算属性通过 <code>Object.defineProperty</code> 代理到当前上下文 <code>ctx</code> 中（行 D），保证通过 <code>this.computedAttrName</code> 可以获取到该计算属性。</p><h2 id="生命周期处理"><a class="header-anchor" href="#生命周期处理" aria-hidden="true">#</a> 生命周期处理</h2><p>生命周期的处理比较特殊的是 <code>beforeCreate</code>，它是优于 <code>mixin</code>、<code>data</code>、<code>watch</code>、<code>computed</code> 先处理：</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asMixin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">callSyncHook</span><span class="token punctuation">(</span><span class="token string">&quot;beforeCreate&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> publicThis<span class="token punctuation">,</span> globalMixins<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">applyMixins</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> globalMixins<span class="token punctuation">,</span> deferredData<span class="token punctuation">,</span> deferredWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>至于其余的生命周期是在最后处理，即它们可以正常地访问实例上的属性（伪代码）：</p><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>lifecycle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token function">lifecycle</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>结束安装过程，主要是初始化我们常见的组件上的选项，只不过我们可以不用 <code>options</code> 式的写法，但是实际上源码中仍然是转化成 <code>options</code> 处理，主要也是为了兼容 <code>options</code> 写法。并且，结束安装的过程比较重要的一点就是调用各个生命周期，而熟悉每个生命周期的执行时机，也可以便于我们平常的开发不犯错。</p>',29);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
