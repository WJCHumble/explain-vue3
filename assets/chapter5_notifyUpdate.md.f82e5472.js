import{l as n,f as s,G as a}from"./framework.5c8a4622.js";const t='{"title":"trigger","description":"","frontmatter":{},"headers":[{"level":2,"title":"set","slug":"set"},{"level":2,"title":"trigger","slug":"trigger-2"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"chapter5/notifyUpdate.md","lastUpdated":1628927998785}',p={},o=a('<h1 id="trigger"><a class="header-anchor" href="#trigger" aria-hidden="true">#</a> trigger</h1><blockquote><p>TODO: 待完善</p></blockquote><h2 id="set"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h2><p>分析完依赖收集的过程，那么派发更新的整个过程的分析也将会水到渠成。首先，对应派发更新，是指当某个主题发生变化时，在我们这个 <code>case</code> 是当 <code>count</code> 发生变化时，此时会触发 <code>data</code> 的 <code>set()</code>，即 <code>target</code> 为 <code>data</code>，<code>key</code> 为 <code>count</code>。</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                oldValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// don&#39;t trigger if target is something up in the prototype chain of original</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>可以看到，<code>oldValue</code> 为 <code>0</code>，而我们的 <code>shallow</code> 此时为 <code>false</code>，<code>value</code> 为 1。那么，我们看一下 <code>toRaw()</code> 函数的逻辑：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token parameter">observed</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> reactiveToRaw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span> <span class="token operator">||</span> readonlyToRaw<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span> <span class="token operator">||</span> observed<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>toRaw()</code> 中有两个 <code>WeakMap</code> 类型的变量 <code>reactiveToRaw</code> 和 <code>readonlyRaw</code>。前者是在初始化 <code>reactive</code> 的时候，将对应的 <code>Proxy</code> 对象存入 <code>reactiveToRaw</code> 这个 <code>Map</code> 中。后者，则是<strong>存入和前者相反的键值对</strong>。即：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> toProxy<span class="token punctuation">,</span> toRaw<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">,</span> collectionHandlers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    toProxy<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> observed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    toRaw<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>observed<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>很显然对于 <code>toRaw()</code> 方法而言，会返回 <code>observer</code> 即 1。所以，<strong>回到</strong> <code>set()</code> <strong>的逻辑</strong>，调用 <code>Reflect.set()</code> 方法将 <code>data</code> 上的 <code>count</code> 的值修改为 1。并且，接下来我们还会命中 <code>target === toRaw(receiver)</code> 的逻辑。</p><p>而 <code>target === toRaw(receiver)</code> 的逻辑会处理两个逻辑：</p><ul><li><p>如果当前对象不存在该属性，触发 <code>triger()</code> 函数对应的 <code>add</code>。</p></li><li><p>或者该属性发生变化，触发 <code>triger()</code> 函数对应的 <code>set</code></p></li></ul><h2 id="trigger-2"><a class="header-anchor" href="#trigger-2" aria-hidden="true">#</a> trigger</h2><p>首先，我们先看一下 <code>trigger()</code> 函数的定义：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> oldTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// never been tracked</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> computedRunners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;clear&quot;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// schedule runs for SET | ADD | DELETE</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// also run for iteration key on ADD | DELETE | Map.SET</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span> <span class="token operator">||</span>\n            <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;delete&quot;</span> <span class="token comment">/* DELETE */</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n            <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span> <span class="token operator">&amp;&amp;</span> target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> iterationKey <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">:</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">;</span>\n            <span class="token function">addRunners</span><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> computedRunners<span class="token punctuation">,</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>iterationKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">scheduleRun</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span>\n            <span class="token operator">?</span> <span class="token punctuation">{</span>\n                newValue<span class="token punctuation">,</span>\n                oldValue<span class="token punctuation">,</span>\n                oldTarget\n            <span class="token punctuation">}</span>\n            <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// Important: computed effects must be run first so that computed getters</span>\n    <span class="token comment">// can be invalidated before any normal effects that depend on them are run.</span>\n    computedRunners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>并且，大家可以看到这里有一个细节，就是计算属性的派发更新要优先于普通属性。</p></blockquote><p>在 <code>trigger()</code> 函数，首先获取当前 <code>targetMap</code> 中 <code>data</code> 对应的主题对象的 <code>depsMap</code>，而这个 <code>depsMap</code> 即我们在依赖收集时在 <code>track</code> 中定义的。</p><p>然后，初始化两个 <code>Set</code> 集合 <code>effects</code> 和 <code>computedRunners</code> ，用于记录普通属性或计算属性的 <code>effect</code>，这个过程是会在 <code>addRunners()</code> 中进行。</p><p>接下来，定义了一个 <code>run()</code> 函数，包裹了 <code>scheduleRun()</code> 函数，并对开发环境和生产环境进行不同参数的传递，这里由于我们处于开发环境，所以传入的是一个对象，即：</p><div class="language-javascript"><pre><code><span class="token punctuation">{</span>\n    newValue<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    oldValue<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    oldTarget<span class="token operator">:</span> <span class="token keyword">undefined</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后遍历 <code>effects</code>，调用 <code>run()</code> 函数，而这个过程实际调用的是 <code>scheduleRun()</code>：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">scheduleRun</span><span class="token punctuation">(</span><span class="token parameter">effect<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> extraInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">&amp;&amp;</span> effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token punctuation">{</span>\n      effect<span class="token punctuation">,</span>\n      target<span class="token punctuation">,</span>\n      key<span class="token punctuation">,</span>\n      type<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span>extraInfo <span class="token operator">?</span> <span class="token function">extend</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> extraInfo<span class="token punctuation">)</span> <span class="token operator">:</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>此时，我们会命中 <code>effect.options.scheduler !== void 0</code> 的逻辑。然后，调用 <code>effect.options.scheduler()</code> 函数，即调用 <code>queueJob()</code> 函数：</p><blockquote><p><code>scheduler</code> 这个属性是在 <code>setupRenderEffect</code> 调用 <code>effect</code> 函数时创建的。</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>这里使用了一个队列维护所有 <code>effect()</code> 函数，其实也和 <code>Vue 2x</code> 相似，因为我们 <code>effect()</code> 相当于 <code>watcher</code>，而 <code>Vue 2x</code> 中对 <code>watcher</code> 的调用也是通过队列的方式维护。队列的存在具体是为了保持 <code>watcher</code> 触发的次序，例如先父 <code>watcher</code> 后子 <code>watcher</code>。</p></blockquote><p>可以看到 我们会先将 <code>effect()</code> 函数添加到队列 <code>queue</code> 中，然后调用 <code>queueFlush()</code> 清空和调用 <code>queue</code>：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFlushPending<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    isFlushPending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">nextTick</span><span class="token punctuation">(</span>flushJobs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>熟悉 <code>Vue 2x</code> 源码的同学，应该知道 <code>Vue 2x</code> 中的 <code>watcher</code> 也是在下一个 <code>tick</code> 中执行，而 <code>Vue 3.0</code> 也是一样。而 <code>flushJobs</code> 中就会对 <code>queue</code> 队列中的 <code>effect()</code> 进行执行：</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">flushJobs</span><span class="token punctuation">(</span><span class="token parameter">seen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  isFlushing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> job<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    seen <span class="token operator">=</span> seen <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>job <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>job <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">checkRecursiveUpdates</span><span class="token punctuation">(</span>seen<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token comment">/* SCHEDULER */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  isFlushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span> postFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">flushJobs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>flushJob()</code> 主要会做几件事：</p><ul><li>首先初始化一个 <code>Map</code> 集合 <code>seen</code>，然后在递归 <code>queue</code> 队列的过程，调用 <code>checkRecursiveUpdates()</code> 记录该 <code>job</code> 即 <code>effect()</code> 触发的次数。如果超过 <code>100</code> 次会抛出错误。</li><li>然后调用 <code>callWithErrorHandling()</code>，执行 <code>job</code> 即 <code>effect()</code>，而我们都知道的是这个 <code>effect</code> 是在 <code>createReactiveEffect()</code> 时创建的 <code>reactiveEffect()</code>，所以，最终会执行 <code>run()</code> 方法，即执行最初在 <code>setupRenderEffectect</code> 定义的 <code>effect()</code>：</li></ul><div class="language-javascript"><pre><code>    <span class="token keyword">const</span> <span class="token function-variable function">setupRenderEffectect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> initialVNode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// create reactive effect for rendering</span>\n        instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">componentEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>\n                <span class="token keyword">const</span> nextTree <span class="token operator">=</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> prevTree <span class="token operator">=</span> instance<span class="token punctuation">.</span>subTree<span class="token punctuation">;</span>\n                instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> nextTree<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bu <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">invokeHooks</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>bu<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>refs <span class="token operator">!==</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    instance<span class="token punctuation">.</span>refs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token function">patch</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">,</span> nextTree<span class="token punctuation">,</span>\n                <span class="token function">hostParentNode</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token function">getNextHostNode</span><span class="token punctuation">(</span>prevTree<span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> isSVG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> nextTree<span class="token punctuation">.</span>el<span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">updateHOCHostEl</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> nextTree<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>u <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>u<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">popWarningContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">createDevEffectOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> prodEffectOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>即此时就是派发更新的最后阶段了，会先 <code>renderComponentRoot()</code> 创建组件 <code>VNode</code>，然后 <code>patch()</code> ，即走一遍组件渲染的过程（当然此时称为更新更为贴切）。从而，完成视图的更新。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>同样地，我们也来回忆派发更新过程的几个关键点。首先，触发依赖的 <code>set()</code>，它会调用 <code>Reflect.set()</code> 修改依赖对应属性的值。然后，调用 <code>trigger()</code> 函数，获取 <code>targetMap</code> 中对应属性的主题，即 <code>depsMap()</code>，并且将 <code>depsMap</code> 中的 <code>effect()</code> 存进 <code>effect</code> 集合中。接下来，就将 <code>effect</code> 进队，在下一个 <code>tick</code> 中清空和执行所有 <code>effect</code>。最后，和在初始化的时候提及的一样，走组件的更新过程，即 <code>renderComponent()</code>、<code>patch()</code> 等等。</p><blockquote><p>整个 <code>set</code> 过程的流程图</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09959c0d138041d1a9d2039804c013d5~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>',38);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
