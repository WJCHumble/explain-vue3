"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAliases = exports.SITE_DATA_REQUEST_PATH = exports.SITE_DATA_ID = exports.DEFAULT_THEME_PATH = exports.SHARED_PATH = exports.APP_PATH = void 0;
const path_1 = __importDefault(require("path"));
const PKG_ROOT = path_1.default.join(__dirname, '../../');
exports.APP_PATH = path_1.default.join(__dirname, '../client/app');
exports.SHARED_PATH = path_1.default.join(__dirname, '../client/shared');
exports.DEFAULT_THEME_PATH = path_1.default.join(__dirname, '../client/theme-default');
// special virtual file
// we can't directly import '/@siteData' because
// - it's not an actual file so we can't use tsconfig paths to redirect it
// - TS doesn't allow shimming a module that starts with '/'
exports.SITE_DATA_ID = '@siteData';
exports.SITE_DATA_REQUEST_PATH = '/' + exports.SITE_DATA_ID;
function resolveAliases(root, themeDir, userConfig) {
    const paths = {
        ...userConfig.alias,
        '/@theme': themeDir,
        '/@shared': exports.SHARED_PATH,
        [exports.SITE_DATA_ID]: exports.SITE_DATA_REQUEST_PATH
    };
    const aliases = [
        ...Object.keys(paths).map((p) => ({
            find: p,
            replacement: paths[p]
        })),
        {
            find: /^vitepress$/,
            replacement: path_1.default.join(__dirname, '../client/index')
        },
        {
            find: /^vitepress\/theme$/,
            replacement: path_1.default.join(__dirname, '../client/theme-default/index')
        },
        // alias for local linked development
        { find: /^vitepress\//, replacement: PKG_ROOT + '/' },
        // make sure it always use the same vue dependency that comes with
        // vitepress itself
        {
            find: /^vue$/,
            replacement: require.resolve('@vue/runtime-dom/dist/runtime-dom.esm-bundler.js')
        }
    ];
    return aliases;
}
exports.resolveAliases = resolveAliases;
//# sourceMappingURL=alias.js.map